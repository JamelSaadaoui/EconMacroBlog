*
* Replication file for Camacho, "Markov-switching models and the unit
* root hypothesis in real U.S. GDP", Economics Letters, vol. 112, 161-164
*
open data gdp.txt
calendar(q) 1947:1
data(format=prn,nolabels,org=columns) 1947:01 2009:04 date gdp
*
set loggdp = 100.0*log(gdp)
set dlog   = loggdp-loggdp{1}
*
* This uses a non-standard trend
*
set trend = 1+.1*(t-1)
*
* It's simpler to run the simulations when we use a different series
* name, so we can replace it with simulated data easily.
*
set logy  = loggdp
set dlogy = dlog
*
@MSRegression(switch=c,nfix=2,regimes=2) dlogy
# trend logy{1} constant
*
@MSRegParmset(parmset=regparms)
nonlin(parmset=msparms)  p
*
compute gstart=1947:2,gend=2009:4
*
* @MSRegInitial doesn't do very well with this model. It separates the
* two regimes by making the intercept in the first lower than the
* intercept in the second, with the gap set based upon the standard
* error of the intercept in a non-switching regression. However, because
* the AR has a near-unit root, the standard error on the constant (and
* trend) coefficients is extremely high because small changes to the AR
* coefficient create large changes to the deterministics. Instead, this
* does the linear regression, then restricts the AR coefficient to be
* exactly the estimate---this removes that source of uncertainty and
* thus gets the separation to a more reasonable distance.
*
linreg dlogy
# trend logy{1} constant
restrict(create) 1
# 2
# 1.0 %beta(2)
*
compute sigsq=%seesq
compute gammas=||%beta(1),%beta(2)||
compute betas(1)=%beta(3)-.5*%stderrs(3)
compute betas(2)=%beta(3)+.5*%stderrs(3)
*
* High (2nd) regime is more persistent than the low (1st) regime
*
compute p=||.75,.10||
*
frml logl = f=%MSRegFVec(t),fpt=%MSProb(t,f),log(fpt)
@MSFilterInit
maximize(start=%(%MSRegInitVariances(),pstar=%msinit()),$
  parmset=regparms+msparms,$
  method=bhhh,pmethod=simplex,piters=2) logl gstart gend
compute msurstat=%tstats(4)
*
* Re-estimate the model under the null of a unit root (the paper seems
* to describe this wrong).
*
nonlin(parmset=forcenull) gammas(2)=0.0
*
* This again needs some help with guess values
*
linreg dlogy
# trend constant
compute sigsq=%seesq
compute gammas=||%beta(1),0.0||
compute betas(1)=%beta(2)-.5*%stderrs(2)
compute betas(2)=%beta(2)+.5*%stderrs(2)
*
@MSFilterInit
maximize(start=%(%MSRegInitVariances(),pstar=%msinit()),$
  parmset=regparms+msparms+forcenull,$
  method=bfgs,pmethod=simplex,piters=2) logl gstart gend
*
* Save information for generating data
*
compute psave=%mspexpand(p)
dec vect[vect] betasave(2)
ewise betasave(i)=betas(i)
compute gammasave=gammas
compute sigmasave=sqrt(sigsq)
*
compute ndraws=1000
dec vect simstats(ndraws)
infobox(action=define,progress,lower=1,upper=ndraws) $
   "Simulated UR Statistics"
do draw=1,ndraws
   gset MSRegime gstart gend   = %ranbranch(%mcergodic(psave))
   gset MSRegime gstart+1 gend = %ranbranch(%xcol(psave,MSRegime{1}))
   *
   * This uses the pre-sample value from the actual data
   *
   set logy gstart gend = betasave(MSRegime)(1)+gammasave(1)*trend+$
        (1+gammasave(2))*logy{1}+%ran(sigmasave)
   set dlogy gstart gend = logy-logy{1}
   *
   * YUNI is a copy of the data used internally by the MSRegression routines
   *
   set yuni = dlogy
   *
   * The guess values have to be re-done for each simulated data series
   *
   linreg(noprint) dlogy
   # trend logy{1} constant
   restrict(noprint,create) 1
   # 2
   # 1.0 %beta(2)
   compute sigsq=%seesq
   compute gammas=||%beta(1),%beta(2)||
   compute betas(1)=%beta(3)-.5*%stderrs(3)
   compute betas(2)=%beta(3)+.5*%stderrs(3)
   compute p=||.75,.10||
   *
   maximize(start=%(%MSRegInitVariances(),pstar=%msinit()),$
     parmset=regparms+msparms,$
     method=bfgs,pmethod=simplex,piters=2,noprint) logl gstart gend
   compute simstats(draw)=%tstats(4)
   infobox(current=draw)
end do draw
infobox(action=remove)
sstats(mean) 1 ndraws simstats(t)>msurstat>>pvalue
disp "Empirical Significance Level" pvalue
